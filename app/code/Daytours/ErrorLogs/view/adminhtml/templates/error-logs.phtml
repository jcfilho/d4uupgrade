<?php

/**
 * @var \Daytours\ErrorLogs\Block\ErrorLogs $block
 */
?>
<div class="error-logs">
    <form id="form-filters" name="form-filters" class="form-filters">
        <div class="control">
            <label>Number of Elements to Show </label>
            <select id="number-errors" name="number-errors">
                <option value="20">20</option>
                <option value="50">50</option>
                <option value="100">100</option>
                <option value="all">All</option>
            </select>
        </div>
        <div class="control">
            <label>See specific module</label>
            <select id="module-list" name="module-list">
                <option value="all">All modules</option>
            </select>
        </div>
        <div class="control">
            <button style="height:fit-content" type="reset">Reset</button>
        </div>
    </form>
    <table border="1" id="error-logs-list" class="table">
        <tr>
            <th>ID</th>
            <th>Module Name</th>
            <th>Message</th>
            <th>Date</th>
            <th>Location</th>
            <th>Details</th>
        </tr>
    </table>
</div>
<script>
    const listElement = document.getElementById("error-logs-list");
    const numberErrorsElemento = document.getElementById("number-errors");
    const moduleListElemento = document.getElementById("module-list");
    const formFiltersElemento = document.getElementById("form-filters");
    let errorsListOriginal = [];
    //let errorsListProcesed = [];
    const getErrors = async () => {
        console.log("OBTENIENDO ERRORES")
        try {
            const res = await fetch(window.location.origin + "/rest/V1/errorlogs/", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json"
                }
            })
            const data = await res.json();
            if (data) {
                errorsListOriginal = data.sort((a, b) => {
                    const dateA = new Date(a.date).getTime();
                    const dateB = new Date(b.date).getTime();
                    if (dateA < dateB) {
                        return 1;
                    }
                    if (dateA > dateB) {
                        return -1;
                    }
                    return 0;
                });
                errorsListOriginal.slice(0, numberErrorsElemento.value).forEach((current, index) => {
                    const rowElement = document.createElement("tr");
                    for (const prop in current) {
                        const colElement = document.createElement("td");
                        if (prop === "moreDetails") {
                            colElement.innerHTML = '<button onclick="showDetails(' + index + ')">Show Details</button>';
                        } else {
                            colElement.innerText = current[prop];
                        }
                        rowElement.appendChild(colElement);
                    }
                    listElement.appendChild(rowElement);
                })

                const moduleList = errorsListOriginal.reduce((prev, curr) => {
                    const existe = prev.find((c) => {
                        return c === curr.moduleName
                    });
                    if (!existe) {
                        prev.push(curr.moduleName);
                    }
                    return prev;
                }, []);

                moduleList.sort().forEach((c) => {
                    const option = document.createElement("option");
                    option.setAttribute("value", c);
                    option.innerText = c;
                    moduleListElemento.appendChild(option);
                });
            }
        } catch (error) {
            console.error(error);
            alert(error.message);
        }
    }

    const onChangeFilter = (e) => {

        let numberOfErrors = numberErrorsElemento.value;
        let moduleChosen = moduleListElemento.value;
        let errorListProcesed = errorsListOriginal;

        if (e.target.name == "form-filters") {
            numberOfErrors = "20";
            moduleChosen = "all";
        }

        if (numberOfErrors !== "all") {
            errorListProcesed = errorsListOriginal.slice(0, parseInt(numberOfErrors));
        }

        if (moduleChosen !== "all") {
            errorListProcesed = errorListProcesed.filter((error) => error.moduleName === moduleChosen);
        }

        listElement.innerHTML = `<tr>
            <th>ID</th>
            <th>Module Name</th>
            <th>Message</th>
            <th>Date</th>
            <th>Location</th>
        </tr>`;
        console.log("LISTA ERRORES: ", errorListProcesed)
        errorListProcesed.forEach((current, index) => {
            const rowElement = document.createElement("tr");
            for (const prop in current) {
                const colElement = document.createElement("td");
                if (prop === "moreDetails") {
                    colElement.innerHTML = '<button onclick="showDetails(' + index + ')">Show Details</button>';
                } else {
                    colElement.innerText = current[prop];
                }
                rowElement.appendChild(colElement);
            }
            listElement.appendChild(rowElement);
        });
    }

    const showDetails = (index) => {
        try {
            let errorLog = errorsListOriginal[index];
            if (errorLog) {
                errorLog = JSON.parse(errorLog["moreDetails"]);
                let message = "Details: \n\n";
                for (const prop in errorLog) {
                    if (prop === "orderItems") {
                        message += "\n\nCart:\n";
                        message += errorLog[prop].reduce((prev, curr) => {
                            prev += " - Sku: " + curr.sku + " Name: " + curr.name + " Quantity: " + curr.quantity + "\n";
                            return prev;
                        }, "")
                    } else {
                        message += prop + ": " + errorLog[prop] + "\n";
                    }
                }
                alert(message);
            } else {
                alert("No se pudo mostrar el error log");
            }
        } catch (error) {
            console.error(error)
            alert(error.message);
        }
    }

    numberErrorsElemento.onchange = onChangeFilter;
    moduleListElemento.onchange = onChangeFilter;
    formFiltersElemento.onreset = onChangeFilter;
    getErrors();
</script>